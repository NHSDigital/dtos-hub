---

name: $(Build.SourceBranchName)-$(Date:yyyyMMdd)_$(Rev:r)
trigger: none
pr: none

pool:
  name: private-pool-dev-uks
  # vmImage: ubuntu-latest

resources:
  repositories:
    - repository: dtos-devops-templates
      type: github
      name: NHSDigital/dtos-devops-templates
      ref: 2a4eb0bdaa785dee8d48e24b763efd2e1a1d89bf
      endpoint: NHSDigital

variables:
  - group: DEV_hub_backend
  - group: DEV_hub_backend_remote_state # to get storage account name for certbot state
  - group: DEV_hub_config
  - name: TF_DIRECTORY
    value: $(System.DefaultWorkingDirectory)/$(System.TeamProject)/infrastructure
  - name: TF_VERSION
    value: 1.9.2
  - name: TF_PLAN_ARTIFACT
    value: tf_plan_hub_art_DEV
  - name: ENVIRONMENT
    value: development

stages:
  - stage: terraform_plan
    displayName: Terraform Plan
    condition: eq(variables['Build.Reason'], 'Manual')
    variables:
      tfVarsFile: environments/$(ENVIRONMENT).tfvars
    jobs:
      - job: init_and_plan
        displayName: Init, plan, store artifact
        steps:
          - checkout: self
          - checkout: dtos-devops-templates
          - template: .azuredevops/templates/steps/tf_plan.yaml@dtos-devops-templates

  - stage: terraform_apply
    displayName: Terraform Apply
    dependsOn: [terraform_plan]
    condition: and(eq(dependencies.terraform_plan.outputs['init_and_plan.TerraformPlan.changesPresent'], 'true'), eq(variables['Build.Reason'], 'Manual'))
    jobs:
      - deployment: terraform_apply
        displayName: Init, get plan artifact, apply
        environment: $(ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: dtos-devops-templates
                - template: .azuredevops/templates/steps/tf_apply.yaml@dtos-devops-templates
                  # parameters:
                  #   # The Application Gateway Config null resource needs an authenticated PowerShell context, hence our shell is pscore
                  #   # AzureCLI@2 task is used rather than AzurePowerShell@5 because Terraform is unable to use a PowerShell authentication context directly
                  #   tfApplyShell: pscore
                  #   tfApplyScript: |
                  #     if (-not (Get-Module -ListAvailable -Name Az)) { Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force -SkipPublisherCheck }
                  #     $token = az account get-access-token --resource https://management.azure.com/ --query accessToken --output tsv
                  #     Connect-AzAccount -AccessToken $token -AccountId $env:servicePrincipalId -Tenant $env:tenantId -Subscription $(TF_VAR_TARGET_SUBSCRIPTION_ID) -ErrorAction Stop
